x['sqldf',]
grep('sql',x['sqldf',])
grep('sql',x['sqldf',], ignore.case=T)
length(grep('sql',x['sqldf',], ignore.case=T))
apply(data.matrix(x), 1, function(v){length(grep('sql',v, ignore.case=T))>0})
which(apply(data.matrix(x), 1, function(v){length(grep('sql',v, ignore.case=T))>0}))
sapply(x, grep, 'sql')
grep('sql',x$name)
grep('sql',x$Title)
grep('sql',x$Title, ignore.case=T)
grep('sql',x$name, ignore.case=T)
lapply(x, grep, 'sql')
class(x)
apply(x,2,grep, pattern='sql',ignore.case=T)
do.call(c,apply(x,2,grep, pattern='sql',ignore.case=T))
unique(do.call(c,apply(x,2,grep, pattern='sql',ignore.case=T)))
x[unique(do.call(c,apply(x,2,grep, pattern='sql',ignore.case=T))),]
?"??"
??plot
??plot
library(devtools)
install_github('bigvis','hadley')
library(bigvis)
install.packages('COBRA')
plot(x=1:10, y=2:11, type='l', col='red')
while(1){rnorm(1)}
source('~/.active-rstudio-document')
test <- function(x=rand(10), y = rand(10), ...){
plot(x,y,...)
}
args(test)
?args
formals(test)
source('~/Script1.R', echo=TRUE)
source('~/Script1.R', echo=TRUE)
source('~/Script1.R', echo=TRUE)
source('~/Script1.R', echo=TRUE)
source('~/Script1.R', echo=TRUE)
source('~/Script1.R', echo=TRUE)
source('~/Script1.R')
source('~/Script1.R', echo=TRUE)
plot(x=1:10, y=2:11, type='l', col='red')
plot(x=1:10, y=2:11, type='l', col='red')
plot(x=1:10, y=2:11, type='l', col='red', lty=2)
x = 1:10
x1 = 2:4
xx = 3:9
exptResults = 1:10
expt1 = 'This'
experiment = "Description"
library(rCharts)
library(devtools)
install_github('rCharts','ramnathv')
install.packages('Lahman')
library(Lahman)
library(plyr)
dat = Teams[,c('yearID','name','G','SO')]
team_data = na.omit(transform( dat, SOG = round(SO/G, 2)))
league_data = ddply(team_data, .(yearID), summarise, SOG = mean(SOG))
league_data
library(rCharts)
p1 = rPlot(SOG~year, data=team_data, type='point',size=list(const=2), color=list(const='#888'), tooltip="function(item){return item.SOG + '\n'+item.name + '\n' + item.yearID}")
p1 = rPlot(SOG~yearID, data=team_data, type='point',size=list(const=2), color=list(const='#888'), tooltip="function(item){return item.SOG + '\n'+item.name + '\n' + item.yearID}")
p1$print('chart1')
p1
library(randomSurvivalForest)
data(veteran)
veteran.out <- rsf(Surv(time, status)~., data=veteran)
print(veteran.out)
plot(veteran.out)
data(pbc, package = "randomSurvivalForest")
pbc.out <- rsf(Surv(days, status) ~ ., pbc, nsplit = 3)
print(pbc.out)
data(veteran, package = "randomSurvivalForest")
pt.train <- sample(1:nrow(veteran), round(nrow(veteran)*0.80))
veteran.out <- rsf(Surv(time, status) ~ ., data = veteran[pt.train , ])
veteran.pred <- predict(veteran.out, veteran[-pt.train , ])
veteran.pred
plot(veteran.pred)
class(veteran.pred)
veteran.pred$ensemble
dim(veteran.pred$ensemble)
veteran.pred$poe
veteran.pred$mortality
data(veteran, package = "randomSurvivalForest")
v.out <- rsf(Surv(time, status) ~ ., veteran, ntree = 1000)
plot.ensemble(v.out)
library(pander)
detach()
library(devtools)
install_github('pander','Rapporter')
library(pander)
library(digest)
pandoc.strong('Foo')
l <- list("First list element", paste0(1:5, '. subelement'), "Second element", list('F', 'B', 'I', c('phone', 'pad', 'talics')))
l
pandoc.list(l,'roman')
pandoc.list(l)
pandoc.list(l,'roman')
m = mtcars[1:2,1:3]
m
pandoc.table(m)
pandoc.table(m,style='simple')
pandoc.table(m,style='grid')
pandoc.table(m,style='rmarkdown')
library(markdown)
pandoc.table(m,style='rmarkdown')
pandoc.table(m,style='grid', caption='Hello table!')
pandoc.table(mtcars[1:2,],style='grid',caption='Hello!')
pander(ks.test(runif(50),runif(50)))
Pandoc.brew(system.file('examples/minimal.brew', package='pander'))
library(Shiny)
library(shiny)
runExample('01_hello')
?dweibull
dweibull(ppoints(100),1,1)
dweibull(ppoints(100),shape=2,scale=1)
dweibull(ppoints(100),shape=1,scale=1)
ppoints(100)
plot(ppoints(100),dweibull(ppoints(100),shape=1,scale=1),type='l')
ppoints(1000)*10
plot(dweibull(ppoints(1000)*10),type='l')
plot(dweibull(ppoints(1000)*10,shape=1, scale=1),type='l')
getwd()
runApp("~")
runApp("~")
runApp("~")
runApp("~")
runApp("~")
runApp("~")
runApp("~")
runApp("~")
runApp("~")
runApp("~")
runApp("~")
x = ppoints(1000)*10
pweibull(x,1,1)
plot(pweibull(x,1,1))
plot(pweibull(x,1,1),type='l')
1-plot(pweibull(x,1,1),type='l')
plot(1-pweibull(x,1,1),type='l')
plot(1-pweibull(x,2,1),type='l')
runApp("~")
runApp("~")
runApp("~")
runApp("~")
runApp("~")
runApp("~")
runApp("~")
library(survival)
?survfit
fit <- survfit(Surv(time,status)~x, data=aml)
fit
?survreg
fit <- survreg(Surv(time,status)~x, data=aml)
fit
fit <- survreg(Surv(time,status)~1, data=aml)
fit
plot(survfit(Surv(time,status)~1, data=aml))
plot(fit)
fit
?survreg
plot(survfit(Surv(time,status)~1, data=aml))
plot(1-pweibull(aml$time,shape=3.64, scale=0.91))
aml$time
pweibull(sort(aml$time), shape=3.64, scale=0.91)
?fitdistr
library(MASS)
?fitdistr
fitdistr(aml$time, 'weibull')
runApp('~')
runApp('~')
runApp('~')
runApp('~')
library(devtools)
install_github('rCharts','ramnathv')
rCharts::open_notebook()
iris
names(iris)=gsub('\\.','',names(iris))
library(rCharts)
rPlot(SepalLength~SepalWidth|Species, data=iris, color='Species',type='point')
hair_eye = as.data.frame(HairEyeColor)
rPlot(Freq ~ Hair | Eye, color = 'Eye', data = hair_eye, type = 'bar')
library(testthat)
expect_that(10, equals(10))
expect_that(10, equals(10+1e-6))
expect_that(10, equals(11))
m = lm(mpg~wt, data=mtcars)
expect_that(m, is_a('lm'))
expect_that(m, is_a('glm'))
string <- 'Testing is fun!'
expect_that(string,matches('Testing'))
expect_that(string,matches('testing'))
a = list(1:10, letters)
str(a)
expect_that(str(a),prints_text("List of 2"))
expect_that(str(a),prints_text("List of two"))
expect_that(library(mgcv), shows_message('This is mgcv'))
expect_that(log(-1), gives_warning())
expect_that(log(0), gives_warning())
expect_that(1/2, thows_error())
expect_that(1/2, throws_error())
expect_that(log(-1), throws_error())
expect_that(log(-1), gives_warning())
expect_that(1/'a', throws_error())
expect_that(1/'a', throws_error('non-numeric argument'))
expect_that(1/'a', throws_error('non-numeric'))
1/'a'
setwd('ARAASTAT/Teaching/')
library(slidify)
author('STslides')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
install.packages('RMySQL')
source('initialize.R')
source('initialize.R')
search()
sessionInfo()
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
?list.files
?list.files
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
print
ls
dir
dir
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
Hmisc::describe
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
??Excel
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
gam
library(gam)
install.packages('gam')
library(elasticnet)
install.packages('elasticnet')
library(help=elasticnet)
library(help='glmnet')
install.packages('glmnet')
library(help='glmnet')
library(help='glmnet')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
library(pander)
?Pandoc.table
pander.table
library(help='pander')
?pandoc.table
library(ascii)
?ascii
?print.ascii
?pandoc.table
outer(c('d','l','a'),c('d','l','a'), paste, sep='')
t1=outer(c('d','l','a'),c('d','l','a'), paste, sep='')
apply(t1,1,paste,'ply',sep='')
t1=apply(t1,1,paste,'ply',sep='')
pandoc.table(t1)
pandoc.table(t1,style='grid')
pandoc.table(t1,style='simple')
pandoc.table(t1,style='rmarkdown')
t1
as.data.frame(t1)
t2=as.data.frame(t1)
row.names(t2)=c('data.frame','list','array')
names(t2) = c('data.frame','list','array')
t2
pandoc.table(t2, style='rmarkdown')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
pandoc.table(t2, style='rmarkdown')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
library(gridExtra)
library(gridExtras)
install.packages(gridExtra))
install.packages('gridExtra')
library(gridExtras)
library(gridExtra)
gridArrange
grid.arrange
?grid.arrange
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
plt <- ggplot(mtcars, aes(x=disp, y=mpg))+geom_point()+
facet_wrap(~factor(cyl), nrow=1)
plt
plt <- ggplot(mtcars, aes(x=disp, y=mpg,group=factor(cyl), color=factor(cyl)))+geom_point()
plt
dev.off()
plt
plt <- ggplot(mtcars, aes(x=disp, y=mpg))+geom_point()+
facet_wrap(~cyl, nrow=1)
plt
facet_wrap(~cyl, nrow=1)
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
library(parallel)
library(RSQLite)
sqlite <- dbDriver('SQLite')
exampledb <- dbConnect(sqlite,'data/mydb.sqlite')
dbListTables(exampledb)
library(sqldf)
sqldf('select * from phenotype limit 5', dbname='data/mydb.sqlite')
sqlTables
dir('data')
sqlite <- dbDriver('SQLite')
exampledb <- dbConnect(sqlite,'data/mydb.sqlite')
dbListTables(exampledb)
library(sqldf)
sqldf('select * from phenotype limit 5', dbname='data/mydb.sqlite')
setwd('data')
sqldf('select * from genotype', dbname='mydb.sqlite')
sqldf('select * from phenotype limit 5', dbname='data/mydb.sqlite')
exampledb <- dbConnect(sqlite,'data/mydb.sqlite')
sqlite <- dbDriver('SQLite')
exampledb <- dbConnect(sqlite,'data/mydb.sqlite')
